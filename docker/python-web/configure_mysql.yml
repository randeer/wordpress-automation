---
- name: Configure MySQL and WordPress
  hosts: localhost
  become: yes

  vars:
    mysql_root_password: "rashmikamanawadu"
    mysql_db_name: "{{ mysql_db_name }}"
    mysql_db_user: "{{ mysql_db_user }}"
    mysql_db_password: "{{ mysql_db_password }}"
    wordpress_name: "{{ wordpress_name }}"
    wordpress_port: "{{ wordpress_port }}"
    userfolder: "{{ userfolder }}"
    wordpress_domain: "{{ wordpress_domain }}"
    useremail: "{{ useremail }}"
    mysql_container_name: "wordpress_mysql"
    wordpress_image_name: "wordpress"  # Update with your WordPress Docker image name

  tasks:
    - name: Create MySQL Database
      command: >
        docker exec -i {{ mysql_container_name }} mysql -u root -p{{ mysql_root_password }} -e "CREATE DATABASE IF NOT EXISTS {{ mysql_db_name }}"
      register: db_result
      ignore_errors: yes

    - name: Create MySQL User
      command: >
        docker exec -i {{ mysql_container_name }} mysql -u root -p{{ mysql_root_password }} -e "CREATE USER '{{ mysql_db_user }}'@'%' IDENTIFIED BY '{{ mysql_db_password }}'"
      when: db_result.rc == 0

    - name: Grant privileges to MySQL User
      command: >
        docker exec -i {{ mysql_container_name }} mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON {{ mysql_db_name }}.* TO '{{ mysql_db_user }}'@'%' WITH GRANT OPTION"
      when: db_result.rc == 0

    - name: Create WordPress Docker Container
      command: >
        docker run -d --name wordpress_{{ wordpress_name }} -e WORDPRESS_DB_HOST={{ mysql_container_name }}  -e WORDPRESS_DB_USER={{ mysql_db_user }} -e WORDPRESS_DB_PASSWORD={{ mysql_db_password }} -e WORDPRESS_DB_NAME={{ mysql_db_name }}  --link wordpress_mysql:mysql -v "/home/randeer/myapp/python-web/users/{{ userfolder }}/html":/var/www/html -p {{ wordpress_port }}:80 {{ wordpress_image_name }}

    - name: checked to see shell command
      become: yes
      shell: echo "Hi Rashmika, this is my folder {{ userfolder }}" > /home/randeer/myapp/python-web/users/{{ userfolder }}/test.txt

    - name: Generate certificates
      become: yes
      shell: certbot certonly --nginx -d {{ wordpress_domain }} --email "{{ useremail }}"

    - name: Append Nginx configuration
      blockinfile:
        path: /etc/nginx/sites-available/default  # Set the actual path to your Nginx configuration file
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ wordpress_port }}"
        block: |
          server {
              server_name {{ wordpress_domain }};
              location / {
                  proxy_pass http://127.0.0.1:{{ wordpress_port }};
                  proxy_redirect off;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Host $server_name;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          
              listen [::]:443 ssl;
              listen 443 ssl;
              ssl_certificate /etc/letsencrypt/live/{{ wordpress_domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ wordpress_domain }}/privkey.pem;
              include /etc/letsencrypt/options-ssl-nginx.conf;
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
          }
          
          server {
              if ($host = {{ wordpress_domain }}) {
                  return 301 https://$host$request_uri;
              }
          
              listen 80;
              listen [::]:80;
              server_name {{ wordpress_domain }};
              return 404;
          }

    #- name: Append lines to wp-config part 1
    #  become: yes
    #  shell: sudo sed -i '51i\define('"'"'WP_SITEURL'"'"', '"'"'http://{{ wordpress_domain }}z'"'"');' users/{{ userfolder }}/html/wp-config.php

    # name: Append lines to wp-config part 2
    # become: yes
    # shell: sudo sed -i '52i\define('"'"'WP_HOME'"'"', '"'"'http://{{ wordpress_domain }}'"'"');' users/{{ userfolder }}/html/wp-config.php

    - name: Stop WordPress Docker Container
      become: yes
      shell: sudo docker stop wordpress_{{ wordpress_name }}

    - name: Start WordPress Docker Container
      become: yes
      shell: sudo docker start wordpress_{{ wordpress_name }}

    - name: Restart nginx service
      become: yes
      shell: sudo systemctl restart nginx.service

